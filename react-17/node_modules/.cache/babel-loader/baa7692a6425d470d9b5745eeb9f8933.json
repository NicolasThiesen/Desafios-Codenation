{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aluno\\\\Codenation\\\\react-17\\\\src\\\\containers\\\\Authorize\\\\Authorize.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Loading } from '../../components';\nimport { Redirect } from 'react-router-dom';\nimport { getToken } from \"../../tools/splitUrl\";\nimport { connect } from \"react-redux\";\nimport \"./Authorize.scss\";\n\nconst Authorize = (auth, content) => {\n  const [autorized, setAutorized] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (window.location.hash !== \"\") {\n      const hash = getToken(window.location.hash);\n      localStorage.setItem(\"token\", hash[\"access_token\"]);\n      localStorage.setItem(\"expires_in\", hash[\"expires_in\"]);\n      localStorage.setItem(\"token_type\", hash[\"token_type\"]);\n      setLoading(false);\n      setAutorized(true);\n    } else {\n      setAutorized(false);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"callback\",\n    \"data-testid\": \"callback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, console.log(auth), autorized === true && loading === false ? /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 55\n    }\n  }) : autorized !== false ? /*#__PURE__*/React.createElement(Loading, {\n    text: \"Autenticando...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 117\n    }\n  }) : /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: \"/\",\n      state: {\n        from: window.location.href\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 162\n    }\n  }));\n};\n\nexport default connect(state => ({\n  auth: state.auth,\n  content: state.content\n}))(Authorize);","map":{"version":3,"sources":["C:/Users/aluno/Codenation/react-17/src/containers/Authorize/Authorize.jsx"],"names":["React","useState","useEffect","Loading","Redirect","getToken","connect","Authorize","auth","content","autorized","setAutorized","loading","setLoading","window","location","hash","localStorage","setItem","console","log","pathname","state","from","href"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,kBAAP;;AAEA,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAMC,OAAN,KAAkB;AAChC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGY,MAAM,CAACC,QAAP,CAAgBC,IAAhB,KAAyB,EAA5B,EAA+B;AAC3B,YAAMA,IAAI,GAAGX,QAAQ,CAACS,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAArB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BF,IAAI,CAAC,cAAD,CAAjC;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAkCF,IAAI,CAAC,YAAD,CAAtC;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAkCF,IAAI,CAAC,YAAD,CAAtC;AACAH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEH,KARD,MAQK;AACDA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAZQ,EAYN,EAZM,CAAT;AAcA,sBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,mBAAY,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,OAAO,CAACC,GAAR,CAAYZ,IAAZ,CADL,EAGIE,SAAS,KAAK,IAAd,IAAsBE,OAAO,KAAK,KAAlC,gBAA0C,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1C,GAAkFF,SAAS,KAAK,KAAd,gBAAsB,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtB,gBAAmE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEW,MAAAA,QAAQ,EAAC,GAAX;AAAgBC,MAAAA,KAAK,EAAC;AAACC,QAAAA,IAAI,EAACT,MAAM,CAACC,QAAP,CAAgBS;AAAtB;AAAtB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHzJ,CAFJ;AASH,CA3BD;;AA6BA,eAAelB,OAAO,CAAEgB,KAAD,KAAY;AAACd,EAAAA,IAAI,EAAEc,KAAK,CAACd,IAAb;AAAmBC,EAAAA,OAAO,EAAEa,KAAK,CAACb;AAAlC,CAAZ,CAAD,CAAP,CAAiEF,SAAjE,CAAf","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport { Loading } from '../../components';\nimport { Redirect } from 'react-router-dom';\nimport { getToken } from \"../../tools/splitUrl\";\nimport { connect } from \"react-redux\"\nimport \"./Authorize.scss\"\n\nconst Authorize = (auth,content) => {\n    const [autorized, setAutorized] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if(window.location.hash !== \"\"){\n            const hash = getToken(window.location.hash);\n            localStorage.setItem(\"token\",hash[\"access_token\"]);\n            localStorage.setItem(\"expires_in\",hash[\"expires_in\"]);\n            localStorage.setItem(\"token_type\",hash[\"token_type\"]);\n            setLoading(false);\n            setAutorized(true);\n\n        }else{\n            setAutorized(false);\n        }\n    }, [])\n    \n    return (\n        \n        <div className=\"callback\" data-testid=\"callback\">\n            {console.log(auth)}\n            {\n            autorized === true && loading === false ? <Redirect to=\"/dashboard\"></Redirect> : autorized !== false ? <Loading text=\"Autenticando...\"></Loading> : <Redirect to={{ pathname:\"/\", state:{from:window.location.href}}}></Redirect>\n            }    \n        </div>\n    )\n}\n\nexport default connect((state) => ({auth: state.auth, content: state.content}))(Authorize);\n"]},"metadata":{},"sourceType":"module"}