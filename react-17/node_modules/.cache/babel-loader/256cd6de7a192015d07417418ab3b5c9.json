{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aluno\\\\Codenation\\\\react-17\\\\src\\\\containers\\\\Authorize\\\\Authorize.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Loading } from '../../components';\nimport { Redirect } from 'react-router-dom';\nimport { getToken } from \"../../tools/splitUrl\";\nimport { connect } from \"react-redux\";\nimport * as Actions from \"../../actions\";\nimport \"./Authorize.scss\";\n\nconst Authorize = ({\n  auth,\n  content,\n  dispatch\n}) => {\n  useEffect(() => {\n    if (window.location.hash !== \"\") {\n      dispatch(Actions.changeContent({\n        status: \"Loading\"\n      }));\n      const hash = getToken(window.location.hash);\n      dispatch(Actions.setAuth({\n        token_type: hash[\"token_type\"],\n        expires_in: hash[\"expires_in\"],\n        access_token: hash[\"token\"]\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"callback\",\n    \"data-testid\": \"callback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, console.log(auth), console.log(content), auth.isLogged === true && content.status === \"idle\" ? /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 67\n    }\n  }) : auth.isLogged !== false && content.status === \"Loading\" ? /*#__PURE__*/React.createElement(Loading, {\n    text: \"Autenticando...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 165\n    }\n  }) : /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: \"/\",\n      state: {\n        from: window.location.href\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 210\n    }\n  }));\n};\n\nexport default connect(state => ({\n  auth: state.auth,\n  content: state.content\n}))(Authorize);","map":{"version":3,"sources":["C:/Users/aluno/Codenation/react-17/src/containers/Authorize/Authorize.jsx"],"names":["React","useState","useEffect","Loading","Redirect","getToken","connect","Actions","Authorize","auth","content","dispatch","window","location","hash","changeContent","status","setAuth","token_type","expires_in","access_token","console","log","isLogged","pathname","state","from","href"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AAEA,OAAO,kBAAP;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,OAAN;AAAeC,EAAAA;AAAf,CAAD,KAA8B;AAE5CT,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAGU,MAAM,CAACC,QAAP,CAAgBC,IAAhB,KAAyB,EAA5B,EAA+B;AAC3BH,MAAAA,QAAQ,CAACJ,OAAO,CAACQ,aAAR,CAAsB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAtB,CAAD,CAAR;AACA,YAAMF,IAAI,GAAGT,QAAQ,CAACO,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAArB;AACAH,MAAAA,QAAQ,CAACJ,OAAO,CAACU,OAAR,CAAgB;AAACC,QAAAA,UAAU,EAAEJ,IAAI,CAAC,YAAD,CAAjB;AAAgCK,QAAAA,UAAU,EAAEL,IAAI,CAAC,YAAD,CAAhD;AAAgEM,QAAAA,YAAY,EAAEN,IAAI,CAAC,OAAD;AAAlF,OAAhB,CAAD,CAAR;AACH;AACJ,GAPQ,EAON,EAPM,CAAT;AASA,sBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,mBAAY,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKO,OAAO,CAACC,GAAR,CAAYb,IAAZ,CADL,EAEKY,OAAO,CAACC,GAAR,CAAYZ,OAAZ,CAFL,EAKID,IAAI,CAACc,QAAL,KAAkB,IAAlB,IAA0Bb,OAAO,CAACM,MAAR,KAAmB,MAA7C,gBAAsD,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtD,GAA8FP,IAAI,CAACc,QAAL,KAAkB,KAAlB,IAA2Bb,OAAO,CAACM,MAAR,KAAmB,SAA9C,gBAA0D,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1D,gBAAuG,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEQ,MAAAA,QAAQ,EAAC,GAAX;AAAgBC,MAAAA,KAAK,EAAC;AAACC,QAAAA,IAAI,EAACd,MAAM,CAACC,QAAP,CAAgBc;AAAtB;AAAtB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALzM,CAFJ;AAWH,CAtBD;;AAwBA,eAAerB,OAAO,CAACmB,KAAK,KAAK;AAAChB,EAAAA,IAAI,EAAEgB,KAAK,CAAChB,IAAb;AAAmBC,EAAAA,OAAO,EAAEe,KAAK,CAACf;AAAlC,CAAL,CAAN,CAAP,CAAgEF,SAAhE,CAAf","sourcesContent":["import React, {useState,useEffect} from 'react';\n\nimport { Loading } from '../../components';\nimport { Redirect } from 'react-router-dom';\n\nimport { getToken } from \"../../tools/splitUrl\";\nimport { connect } from \"react-redux\"\nimport * as Actions from \"../../actions\"\n\nimport \"./Authorize.scss\"\n\nconst Authorize = ({auth,content, dispatch}) => {\n\n    useEffect(() => {\n\n        if(window.location.hash !== \"\"){\n            dispatch(Actions.changeContent({status: \"Loading\"}))\n            const hash = getToken(window.location.hash);\n            dispatch(Actions.setAuth({token_type: hash[\"token_type\"],expires_in: hash[\"expires_in\"], access_token: hash[\"token\"]}))\n        }\n    }, [])\n    \n    return (\n        \n        <div className=\"callback\" data-testid=\"callback\">\n            {console.log(auth)}\n            {console.log(content)}\n\n            {\n            auth.isLogged === true && content.status === \"idle\" ? <Redirect to=\"/dashboard\"></Redirect> : auth.isLogged !== false && content.status === \"Loading\" ? <Loading text=\"Autenticando...\"></Loading> : <Redirect to={{ pathname:\"/\", state:{from:window.location.href}}}></Redirect>\n            }    \n        </div>\n    )\n}\n\nexport default connect(state => ({auth: state.auth, content: state.content,}))(Authorize);\n"]},"metadata":{},"sourceType":"module"}