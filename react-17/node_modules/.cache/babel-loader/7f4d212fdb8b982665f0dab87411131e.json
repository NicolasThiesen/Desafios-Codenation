{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aluno\\\\Codenation\\\\react-17\\\\src\\\\routes\\\\DashboardRoute.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as Actions from \"../actions\";\nimport { connect } from 'react-redux';\nimport { Dashboard, Topbar, Categories } from '../containers';\nimport { getProfileUser } from \"../tools/handleRequests\";\n\nconst DashboardRoute = ({\n  cate,\n  user,\n  auth,\n  dispatch\n}) => {\n  useEffect(() => {\n    async function teste() {\n      const {\n        images,\n        email,\n        display_name\n      } = await getProfileUser(auth.accessToken).then(res => res.data).catch(error => {\n        if (error === 401) {\n          return dispatch(Actions.logout);\n        }\n\n        dispatch(Actions.loginError(error));\n      });\n      dispatch(Actions.setUser({\n        email: email,\n        name: display_name,\n        thumb: images[0].url\n      }));\n    }\n\n    teste();\n  }, [auth, dispatch]);\n  useEffect(() => {\n    async function getCategories() {\n      const {} = await getCategories(auth.accessToken).then(res => console.log(res));\n    }\n\n    getCategories();\n  }, [auth, dispatch]);\n  return /*#__PURE__*/React.createElement(Dashboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Topbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Categories, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default connect(state => ({\n  user: state.user,\n  auth: state.auth,\n  categories: state.categories\n}))(DashboardRoute);","map":{"version":3,"sources":["C:/Users/aluno/Codenation/react-17/src/routes/DashboardRoute.js"],"names":["React","useState","useEffect","Actions","connect","Dashboard","Topbar","Categories","getProfileUser","DashboardRoute","cate","user","auth","dispatch","teste","images","email","display_name","accessToken","then","res","data","catch","error","logout","loginError","setUser","name","thumb","url","getCategories","console","log","state","categories"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,EAAkBC,MAAlB,EAAyBC,UAAzB,QAA0C,eAA1C;AACA,SAAQC,cAAR,QAA6B,yBAA7B;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,IAAN;AAAWC,EAAAA,IAAX;AAAgBC,EAAAA;AAAhB,CAAD,KAA+B;AAClDX,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeY,KAAf,GAAsB;AAClB,YAAM;AAACC,QAAAA,MAAD;AAAQC,QAAAA,KAAR;AAAcC,QAAAA;AAAd,UAA+B,MAAMT,cAAc,CAACI,IAAI,CAACM,WAAN,CAAd,CACtCC,IADsC,CACjCC,GAAG,IAAIA,GAAG,CAACC,IADsB,EAEtCC,KAFsC,CAEhCC,KAAK,IACR;AACI,YAAGA,KAAK,KAAK,GAAb,EAAiB;AACb,iBAAOV,QAAQ,CAACV,OAAO,CAACqB,MAAT,CAAf;AACH;;AACDX,QAAAA,QAAQ,CAACV,OAAO,CAACsB,UAAR,CAAmBF,KAAnB,CAAD,CAAR;AAAoC,OAPL,CAA3C;AAQAV,MAAAA,QAAQ,CAACV,OAAO,CAACuB,OAAR,CAAgB;AAACV,QAAAA,KAAK,EAAEA,KAAR;AAAeW,QAAAA,IAAI,EAAEV,YAArB;AAAmCW,QAAAA,KAAK,EAAEb,MAAM,CAAC,CAAD,CAAN,CAAUc;AAApD,OAAhB,CAAD,CAAR;AACH;;AACDf,IAAAA,KAAK;AACR,GAbQ,EAaN,CAACF,IAAD,EAAMC,QAAN,CAbM,CAAT;AAcAX,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAe4B,aAAf,GAA8B;AAC1B,YAAM,KAAK,MAAMA,aAAa,CAAClB,IAAI,CAACM,WAAN,CAAb,CACZC,IADY,CACPC,GAAG,IAAEW,OAAO,CAACC,GAAR,CAAYZ,GAAZ,CADE,CAAjB;AAEH;;AACDU,IAAAA,aAAa;AAChB,GANQ,EAMN,CAAClB,IAAD,EAAMC,QAAN,CANM,CAAT;AAOA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CA5BD;;AA6BA,eAAeT,OAAO,CAAC6B,KAAK,KAAK;AAACtB,EAAAA,IAAI,EAAEsB,KAAK,CAACtB,IAAb;AAAmBC,EAAAA,IAAI,EAAEqB,KAAK,CAACrB,IAA/B;AAAqCsB,EAAAA,UAAU,EAAED,KAAK,CAACC;AAAvD,CAAL,CAAN,CAAP,CAAuFzB,cAAvF,CAAf","sourcesContent":["import React, {useState,useEffect} from 'react';\r\nimport * as Actions from \"../actions\";\r\nimport {connect} from 'react-redux';\r\nimport {Dashboard,Topbar,Categories} from '../containers';\r\nimport {getProfileUser} from \"../tools/handleRequests\"\r\n\r\n\r\nconst DashboardRoute = ({cate,user,auth,dispatch}) => {\r\n    useEffect(() => {\r\n        async function teste(){\r\n            const {images,email,display_name,} = await getProfileUser(auth.accessToken)\r\n                .then(res => res.data)\r\n                .catch(error => \r\n                    {\r\n                        if(error === 401){\r\n                            return dispatch(Actions.logout)\r\n                        } \r\n                        dispatch(Actions.loginError(error))})\r\n            dispatch(Actions.setUser({email: email, name: display_name, thumb: images[0].url}))\r\n        }\r\n        teste()\r\n    }, [auth,dispatch])\r\n    useEffect(() => {\r\n        async function getCategories(){\r\n            const {} = await getCategories(auth.accessToken)\r\n                .then(res=>console.log(res))\r\n        }\r\n        getCategories()\r\n    }, [auth,dispatch])\r\n    return (\r\n        <Dashboard>\r\n            <Topbar></Topbar>\r\n            <Categories></Categories>\r\n        </Dashboard>\r\n    )\r\n}\r\nexport default connect(state => ({user: state.user, auth: state.auth, categories: state.categories}))(DashboardRoute)"]},"metadata":{},"sourceType":"module"}