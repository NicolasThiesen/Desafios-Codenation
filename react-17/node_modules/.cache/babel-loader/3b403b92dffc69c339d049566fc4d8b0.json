{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aluno\\\\Codenation\\\\react-17\\\\src\\\\containers\\\\Tracks\\\\Track.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { BsPlayFill, BsVolumeUpFill } from 'react-icons/bs';\nimport Ink from 'react-ink';\nimport { addTrackToPlayer, removeTrackToPlayer } from '../../actions';\nimport './Track.scss';\n\nconst Track = ({\n  track,\n  playingNowId\n}) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    if (isPlaying && playingNowId === track.id) {\n      setIsPlaying(false);\n      dispatch(removeTrackToPlayer());\n      return;\n    }\n\n    dispatch(addTrackToPlayer(track));\n    setIsPlaying(!isPlaying);\n  };\n\n  useEffect(() => {\n    if (playingNowId === track.id) {\n      return;\n    }\n\n    setIsPlaying(false);\n  }, [playingNowId, track.id]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `track ${isPlaying && 'is-playing'}`,\n    \"data-testid\": \"track\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"track__play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"track__play__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BsPlayFill, {\n    className: \"track__play__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(BsVolumeUpFill, {\n    className: \"track__play__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"track__info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"track__name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, track.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"track__artists\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, track.artists.length && track.artists.map(({\n    name\n  }) => name).join(', '))), /*#__PURE__*/React.createElement(Ink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nTrack.propTypes = {\n  track: PropTypes.object.isRequired\n};\nexport default Track;","map":{"version":3,"sources":["C:/Users/aluno/Codenation/react-17/src/containers/Tracks/Track.jsx"],"names":["React","useEffect","useState","PropTypes","useDispatch","BsPlayFill","BsVolumeUpFill","Ink","addTrackToPlayer","removeTrackToPlayer","Track","track","playingNowId","isPlaying","setIsPlaying","dispatch","handleClick","id","name","artists","length","map","join","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,gBAA3C;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,eAAtD;AAEA,OAAO,cAAP;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA6B;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,QAAMY,WAAW,GAAG,MAAM;AACxB,QAAIH,SAAS,IAAID,YAAY,KAAKD,KAAK,CAACM,EAAxC,EAA4C;AAC1CH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAC,MAAAA,QAAQ,CAACN,mBAAmB,EAApB,CAAR;AAEA;AACD;;AAEDM,IAAAA,QAAQ,CAACP,gBAAgB,CAACG,KAAD,CAAjB,CAAR;AAEAG,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAXD;;AAaAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,YAAY,KAAKD,KAAK,CAACM,EAA3B,EAA+B;AAC7B;AACD;;AAEDH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GANQ,EAMN,CAACF,YAAD,EAAeD,KAAK,CAACM,EAArB,CANM,CAAT;AAQA,sBACE;AACE,IAAA,SAAS,EAAG,SAAQJ,SAAS,IAAI,YAAa,EADhD;AAEE,mBAAY,OAFd;AAGE,IAAA,OAAO,EAAEG,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,mBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CAJF,eAWE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BL,KAAK,CAACO,IAArC,CADF,eAGE;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCP,KAAK,CAACQ,OAAN,CAAcC,MAAd,IAAwBT,KAAK,CAACQ,OAAN,CAAcE,GAAd,CAAkB,CAAC;AAAEH,IAAAA;AAAF,GAAD,KAAcA,IAAhC,EAAsCI,IAAtC,CAA2C,IAA3C,CADzB,CAHF,CAXF,eAmBE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,CADF;AAuBD,CAhDD;;AAkDAZ,KAAK,CAACa,SAAN,GAAkB;AAChBZ,EAAAA,KAAK,EAAER,SAAS,CAACqB,MAAV,CAAiBC;AADR,CAAlB;AAIA,eAAef,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { BsPlayFill, BsVolumeUpFill } from 'react-icons/bs';\nimport Ink from 'react-ink';\n\nimport { addTrackToPlayer, removeTrackToPlayer } from '../../actions';\n\nimport './Track.scss';\n\nconst Track = ({ track, playingNowId }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    if (isPlaying && playingNowId === track.id) {\n      setIsPlaying(false);\n      dispatch(removeTrackToPlayer());\n\n      return;\n    }\n\n    dispatch(addTrackToPlayer(track));\n\n    setIsPlaying(!isPlaying);\n  };\n\n  useEffect(() => {\n    if (playingNowId === track.id) {\n      return;\n    }\n\n    setIsPlaying(false);\n  }, [playingNowId, track.id])\n\n  return (\n    <div\n      className={`track ${isPlaying && 'is-playing'}`}\n      data-testid=\"track\"\n      onClick={handleClick}>\n      <div className=\"track__play\">\n        <div className=\"track__play__wrapper\">\n          <BsPlayFill className=\"track__play__icon\" />\n          <BsVolumeUpFill className=\"track__play__icon\" />\n        </div>\n      </div>\n\n      <div className=\"track__info\">\n        <span className=\"track__name\">{track.name}</span>\n\n        <span className=\"track__artists\">\n        {track.artists.length && track.artists.map(({ name }) => name).join(', ')}\n      </span>\n      </div>\n\n      <Ink />\n    </div>\n  );\n};\n\nTrack.propTypes = {\n  track: PropTypes.object.isRequired,\n}\n\nexport default Track;\n"]},"metadata":{},"sourceType":"module"}