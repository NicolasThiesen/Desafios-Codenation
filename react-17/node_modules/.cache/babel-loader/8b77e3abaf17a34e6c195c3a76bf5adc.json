{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aluno\\\\Codenation\\\\react-17\\\\src\\\\routes\\\\DashboardRoute.js\";\nimport React, { useEffect } from 'react';\nimport { Switch, useRouteMatch } from \"react-router-dom\";\nimport * as Actions from \"../actions\";\nimport { connect } from 'react-redux';\nimport { Dashboard, Topbar, Categories, PrivateRoute, Tracks } from '../containers';\nimport { WelcomeBox } from '../components';\nimport { getProfileUser, getCategories } from \"../tools/handleRequests\";\nimport PlaylistRoute from './PlaylistRoute';\n\nconst DashboardRoute = ({\n  content,\n  user,\n  auth,\n  dispatch\n}) => {\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  useEffect(() => {\n    async function getUser() {\n      const {\n        images,\n        email,\n        display_name\n      } = await getProfileUser(auth.accessToken).then(res => res.data).catch(error => {\n        if (error === 401) {\n          return dispatch(Actions.logout);\n        }\n\n        dispatch(Actions.loginError(error));\n      });\n      dispatch(Actions.setUser({\n        email: email,\n        name: display_name,\n        thumb: images[0].url\n      }));\n    }\n\n    getUser();\n  }, [auth, dispatch]);\n  useEffect(() => {\n    async function setCategories() {\n      const {\n        categories\n      } = await getCategories(auth.accessToken).then(res => res.data).catch(error => {\n        if (error === 401) {\n          dispatch(Actions.logout);\n          return;\n        }\n\n        dispatch(Actions.setCategorieError(error));\n      });\n      dispatch(Actions.getCategoriesSuccess(categories.items));\n    }\n\n    setCategories();\n  }, [auth, dispatch]);\n  return /*#__PURE__*/React.createElement(Dashboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Topbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PrivateRoute, {\n    exact: true,\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(WelcomeBox, {\n    name: user.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Categories, {\n    data: content.categories,\n    url: url,\n    isLoading: content.status === \"succes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(PrivateRoute, {\n    path: `${path}/:categoryId`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PlaylistRoute, {\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(PrivateRoute, {\n    path: `${path}/:categoryId/:playlistId`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tracks, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default connect(state => ({\n  user: state.user,\n  auth: state.auth,\n  content: state.content\n}))(DashboardRoute);","map":{"version":3,"sources":["C:/Users/aluno/Codenation/react-17/src/routes/DashboardRoute.js"],"names":["React","useEffect","Switch","useRouteMatch","Actions","connect","Dashboard","Topbar","Categories","PrivateRoute","Tracks","WelcomeBox","getProfileUser","getCategories","PlaylistRoute","DashboardRoute","content","user","auth","dispatch","url","path","getUser","images","email","display_name","accessToken","then","res","data","catch","error","logout","loginError","setUser","name","thumb","setCategories","categories","setCategorieError","getCategoriesSuccess","items","status","state"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {Switch,useRouteMatch} from \"react-router-dom\"\r\n\r\nimport * as Actions from \"../actions\";\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport {Dashboard,Topbar,Categories, PrivateRoute, Tracks} from '../containers';\r\nimport {WelcomeBox} from '../components';\r\nimport {getProfileUser,getCategories} from \"../tools/handleRequests\"\r\n\r\nimport PlaylistRoute from './PlaylistRoute';\r\n\r\n\r\nconst DashboardRoute = ({content,user,auth,dispatch}) => {\r\n    const { url, path } = useRouteMatch()\r\n    useEffect(() => {\r\n        async function getUser(){\r\n            const {images,email,display_name,} = await getProfileUser(auth.accessToken)\r\n                .then(res => res.data)\r\n                .catch(error => \r\n                    {\r\n                        if(error === 401){\r\n                            return dispatch(Actions.logout)\r\n                        } \r\n                        dispatch(Actions.loginError(error))})\r\n            dispatch(Actions.setUser({email: email, name: display_name, thumb: images[0].url}))\r\n        }\r\n        getUser()\r\n    }, [auth,dispatch])\r\n    useEffect(() => {\r\n        async function setCategories(){\r\n            const {categories} = await getCategories(auth.accessToken)\r\n                .then(res=>res.data)\r\n                .catch(error=> {\r\n                    if(error ===401){\r\n                        dispatch(Actions.logout);\r\n                        return\r\n                    }\r\n                    dispatch(Actions.setCategorieError(error))\r\n                })\r\n            dispatch(Actions.getCategoriesSuccess(categories.items))\r\n        }\r\n        setCategories();\r\n    }, [auth,dispatch])\r\n    return (\r\n        <Dashboard>\r\n            <Topbar></Topbar>\r\n            <Switch>\r\n                <PrivateRoute exact path={path}>\r\n                    <WelcomeBox name={user.name}/>\r\n                    <Categories data={content.categories} url={url} isLoading={content.status ===\"succes\" }></Categories>\r\n                </PrivateRoute>\r\n                <PrivateRoute path={`${path}/:categoryId`}>\r\n                    <PlaylistRoute path={path}></PlaylistRoute>\r\n                </PrivateRoute>\r\n                <PrivateRoute path={`${path}/:categoryId/:playlistId`}>\r\n                    <Tracks></Tracks>\r\n                </PrivateRoute>\r\n            </Switch>\r\n        </Dashboard>\r\n    )\r\n}\r\nexport default connect(state => ({user: state.user, auth: state.auth, content: state.content}))(DashboardRoute)"]},"metadata":{},"sourceType":"module"}