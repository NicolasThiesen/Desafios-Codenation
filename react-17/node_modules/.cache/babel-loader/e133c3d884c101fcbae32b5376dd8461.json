{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aluno\\\\Codenation\\\\react-17\\\\src\\\\routes\\\\PlaylistRoute.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Playlists } from \"../containers\";\nimport * as Actions from '../actions';\nimport { getCategoryPlaylists } from '../tools/handleRequests';\n\nconst PlaylistRoute = ({\n  path,\n  auth,\n  content,\n  dispatch\n}) => {\n  const {\n    categoryId\n  } = useParams();\n  useEffect(() => {\n    async function getPlaylist() {\n      const {\n        playlists\n      } = await getCategoryPlaylists(categoryId, auth.accessToken).then(res => res.data).catch(erro => {\n        if (erro === 401) {\n          dispatch(Actions.logout);\n          return;\n        }\n\n        dispatch(Actions.setCategorieError(erro));\n      });\n      dispatch(Actions.getPlaylistsSuccess(playlists));\n    }\n\n    getPlaylist();\n  }, []);\n  return /*#__PURE__*/React.createElement(Playlists, {\n    categoryId: categoryId,\n    categoryName: content.categories.find(categorie => categoryId === categorie.id),\n    data: content.playlists,\n    isLoading: content.status === \"success\",\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, console.log(content.playlists));\n};\n\nexport default connect(state => ({\n  auth: state.auth,\n  content: state.content\n}))(PlaylistRoute);","map":{"version":3,"sources":["C:/Users/aluno/Codenation/react-17/src/routes/PlaylistRoute.js"],"names":["React","useEffect","connect","useParams","Playlists","Actions","getCategoryPlaylists","PlaylistRoute","path","auth","content","dispatch","categoryId","getPlaylist","playlists","accessToken","then","res","data","catch","erro","logout","setCategorieError","getPlaylistsSuccess","categories","find","categorie","id","status","console","log","state"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,SAASC,SAAT,QAA0B,eAA1B;AAEA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AAEA,SAAQC,oBAAR,QAAmC,yBAAnC;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,IAAN;AAAWC,EAAAA,OAAX;AAAmBC,EAAAA;AAAnB,CAAD,KAAkC;AACpD,QAAM;AAAEC,IAAAA;AAAF,MAAiBT,SAAS,EAAhC;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeY,WAAf,GAA4B;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAgB,MAAMR,oBAAoB,CAACM,UAAD,EAAYH,IAAI,CAACM,WAAjB,CAApB,CACvBC,IADuB,CAClBC,GAAG,IAAGA,GAAG,CAACC,IADQ,EAEvBC,KAFuB,CAEjBC,IAAI,IAAE;AACT,YAAGA,IAAI,KAAI,GAAX,EAAe;AACXT,UAAAA,QAAQ,CAACN,OAAO,CAACgB,MAAT,CAAR;AACA;AACH;;AACDV,QAAAA,QAAQ,CAACN,OAAO,CAACiB,iBAAR,CAA0BF,IAA1B,CAAD,CAAR;AACH,OARuB,CAA5B;AASAT,MAAAA,QAAQ,CAACN,OAAO,CAACkB,mBAAR,CAA4BT,SAA5B,CAAD,CAAR;AACH;;AACDD,IAAAA,WAAW;AACd,GAdQ,EAcN,EAdM,CAAT;AAeA,sBACI,oBAAC,SAAD;AACI,IAAA,UAAU,EAAED,UADhB;AAEI,IAAA,YAAY,EAAEF,OAAO,CAACc,UAAR,CAAmBC,IAAnB,CAAwBC,SAAS,IAAId,UAAU,KAAKc,SAAS,CAACC,EAA9D,CAFlB;AAGI,IAAA,IAAI,EAAEjB,OAAO,CAACI,SAHlB;AAII,IAAA,SAAS,EAAEJ,OAAO,CAACkB,MAAR,KAAiB,SAJhC;AAKI,IAAA,IAAI,EAAEpB,IALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKqB,OAAO,CAACC,GAAR,CAAYpB,OAAO,CAACI,SAApB,CANL,CADJ;AAWH,CA5BD;;AA8BA,eAAeZ,OAAO,CAAC6B,KAAK,KAAK;AAACtB,EAAAA,IAAI,EAAEsB,KAAK,CAACtB,IAAb;AAAmBC,EAAAA,OAAO,EAAEqB,KAAK,CAACrB;AAAlC,CAAL,CAAN,CAAP,CAA+DH,aAA/D,CAAf","sourcesContent":["import React,{useEffect} from 'react'\r\nimport {connect} from 'react-redux';\r\n\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport { Playlists } from \"../containers\";\r\n\r\nimport * as Actions from '../actions'\r\n\r\nimport {getCategoryPlaylists} from '../tools/handleRequests'\r\n\r\nconst PlaylistRoute = ({path,auth,content,dispatch}) => {\r\n    const { categoryId } = useParams();\r\n    useEffect(() => {\r\n        async function getPlaylist(){\r\n            const { playlists } = await getCategoryPlaylists(categoryId,auth.accessToken)\r\n                .then(res=> res.data)\r\n                .catch(erro=>{\r\n                    if(erro ===401){\r\n                        dispatch(Actions.logout);\r\n                        return\r\n                    }\r\n                    dispatch(Actions.setCategorieError(erro));\r\n                }) \r\n            dispatch(Actions.getPlaylistsSuccess(playlists));\r\n        }\r\n        getPlaylist();\r\n    }, [])\r\n    return (\r\n        <Playlists \r\n            categoryId={categoryId}\r\n            categoryName={content.categories.find(categorie => categoryId === categorie.id)} \r\n            data={content.playlists} \r\n            isLoading={content.status===\"success\"} \r\n            path={path}>\r\n            {console.log(content.playlists)}\r\n\r\n        </Playlists>\r\n    )\r\n}\r\n\r\nexport default connect(state => ({auth: state.auth, content: state.content}))(PlaylistRoute)\r\n"]},"metadata":{},"sourceType":"module"}